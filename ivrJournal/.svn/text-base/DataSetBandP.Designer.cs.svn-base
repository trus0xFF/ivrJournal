//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ivrJournal {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetBandP")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetBandP : System.Data.DataSet {
        
        private DataTableBonusDataTable tableDataTableBonus;
        
        private DataTablePenaltyDataTable tableDataTablePenalty;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetBandP() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetBandP(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTableBonus"] != null)) {
                    base.Tables.Add(new DataTableBonusDataTable(ds.Tables["DataTableBonus"]));
                }
                if ((ds.Tables["DataTablePenalty"] != null)) {
                    base.Tables.Add(new DataTablePenaltyDataTable(ds.Tables["DataTablePenalty"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableBonusDataTable DataTableBonus {
            get {
                return this.tableDataTableBonus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTablePenaltyDataTable DataTablePenalty {
            get {
                return this.tableDataTablePenalty;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSetBandP cln = ((DataSetBandP)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTableBonus"] != null)) {
                    base.Tables.Add(new DataTableBonusDataTable(ds.Tables["DataTableBonus"]));
                }
                if ((ds.Tables["DataTablePenalty"] != null)) {
                    base.Tables.Add(new DataTablePenaltyDataTable(ds.Tables["DataTablePenalty"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTableBonus = ((DataTableBonusDataTable)(base.Tables["DataTableBonus"]));
            if ((initTable == true)) {
                if ((this.tableDataTableBonus != null)) {
                    this.tableDataTableBonus.InitVars();
                }
            }
            this.tableDataTablePenalty = ((DataTablePenaltyDataTable)(base.Tables["DataTablePenalty"]));
            if ((initTable == true)) {
                if ((this.tableDataTablePenalty != null)) {
                    this.tableDataTablePenalty.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetBandP";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetBandP.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTableBonus = new DataTableBonusDataTable();
            base.Tables.Add(this.tableDataTableBonus);
            this.tableDataTablePenalty = new DataTablePenaltyDataTable();
            base.Tables.Add(this.tableDataTablePenalty);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableBonus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTablePenalty() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetBandP ds = new DataSetBandP();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DataTableBonusRowChangeEventHandler(object sender, DataTableBonusRowChangeEvent e);
        
        public delegate void DataTablePenaltyRowChangeEventHandler(object sender, DataTablePenaltyRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableBonusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnumberpp;
            
            private System.Data.DataColumn columndate_bonus;
            
            private System.Data.DataColumn columnbonus_reason;
            
            private System.Data.DataColumn columnbonus_type;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusDataTable() {
                this.TableName = "DataTableBonus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableBonusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableBonusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numberppColumn {
                get {
                    return this.columnnumberpp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date_bonusColumn {
                get {
                    return this.columndate_bonus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bonus_reasonColumn {
                get {
                    return this.columnbonus_reason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bonus_typeColumn {
                get {
                    return this.columnbonus_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow this[int index] {
                get {
                    return ((DataTableBonusRow)(this.Rows[index]));
                }
            }
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowChanging;
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowChanged;
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowDeleting;
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableBonusRow(DataTableBonusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow AddDataTableBonusRow(string numberpp, string date_bonus, string bonus_reason, string bonus_type) {
                DataTableBonusRow rowDataTableBonusRow = ((DataTableBonusRow)(this.NewRow()));
                rowDataTableBonusRow.ItemArray = new object[] {
                        numberpp,
                        date_bonus,
                        bonus_reason,
                        bonus_type};
                this.Rows.Add(rowDataTableBonusRow);
                return rowDataTableBonusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableBonusDataTable cln = ((DataTableBonusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableBonusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnumberpp = base.Columns["numberpp"];
                this.columndate_bonus = base.Columns["date_bonus"];
                this.columnbonus_reason = base.Columns["bonus_reason"];
                this.columnbonus_type = base.Columns["bonus_type"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnumberpp = new System.Data.DataColumn("numberpp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumberpp);
                this.columndate_bonus = new System.Data.DataColumn("date_bonus", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_bonus);
                this.columnbonus_reason = new System.Data.DataColumn("bonus_reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbonus_reason);
                this.columnbonus_type = new System.Data.DataColumn("bonus_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbonus_type);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow NewDataTableBonusRow() {
                return ((DataTableBonusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableBonusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableBonusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableBonusRowChanged != null)) {
                    this.DataTableBonusRowChanged(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableBonusRowChanging != null)) {
                    this.DataTableBonusRowChanging(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableBonusRowDeleted != null)) {
                    this.DataTableBonusRowDeleted(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableBonusRowDeleting != null)) {
                    this.DataTableBonusRowDeleting(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableBonusRow(DataTableBonusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetBandP ds = new DataSetBandP();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableBonusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTablePenaltyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnumberpp;
            
            private System.Data.DataColumn columndate_penalty;
            
            private System.Data.DataColumn columnreason;
            
            private System.Data.DataColumn columnpenalty_type;
            
            private System.Data.DataColumn columnremoval;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenaltyDataTable() {
                this.TableName = "DataTablePenalty";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePenaltyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTablePenaltyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn numberppColumn {
                get {
                    return this.columnnumberpp;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date_penaltyColumn {
                get {
                    return this.columndate_penalty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn penalty_typeColumn {
                get {
                    return this.columnpenalty_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn removalColumn {
                get {
                    return this.columnremoval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenaltyRow this[int index] {
                get {
                    return ((DataTablePenaltyRow)(this.Rows[index]));
                }
            }
            
            public event DataTablePenaltyRowChangeEventHandler DataTablePenaltyRowChanging;
            
            public event DataTablePenaltyRowChangeEventHandler DataTablePenaltyRowChanged;
            
            public event DataTablePenaltyRowChangeEventHandler DataTablePenaltyRowDeleting;
            
            public event DataTablePenaltyRowChangeEventHandler DataTablePenaltyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTablePenaltyRow(DataTablePenaltyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenaltyRow AddDataTablePenaltyRow(string numberpp, string date_penalty, string reason, string penalty_type, string removal) {
                DataTablePenaltyRow rowDataTablePenaltyRow = ((DataTablePenaltyRow)(this.NewRow()));
                rowDataTablePenaltyRow.ItemArray = new object[] {
                        numberpp,
                        date_penalty,
                        reason,
                        penalty_type,
                        removal};
                this.Rows.Add(rowDataTablePenaltyRow);
                return rowDataTablePenaltyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTablePenaltyDataTable cln = ((DataTablePenaltyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTablePenaltyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnumberpp = base.Columns["numberpp"];
                this.columndate_penalty = base.Columns["date_penalty"];
                this.columnreason = base.Columns["reason"];
                this.columnpenalty_type = base.Columns["penalty_type"];
                this.columnremoval = base.Columns["removal"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnumberpp = new System.Data.DataColumn("numberpp", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumberpp);
                this.columndate_penalty = new System.Data.DataColumn("date_penalty", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_penalty);
                this.columnreason = new System.Data.DataColumn("reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
                this.columnpenalty_type = new System.Data.DataColumn("penalty_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpenalty_type);
                this.columnremoval = new System.Data.DataColumn("removal", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnremoval);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenaltyRow NewDataTablePenaltyRow() {
                return ((DataTablePenaltyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTablePenaltyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTablePenaltyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTablePenaltyRowChanged != null)) {
                    this.DataTablePenaltyRowChanged(this, new DataTablePenaltyRowChangeEvent(((DataTablePenaltyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTablePenaltyRowChanging != null)) {
                    this.DataTablePenaltyRowChanging(this, new DataTablePenaltyRowChangeEvent(((DataTablePenaltyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTablePenaltyRowDeleted != null)) {
                    this.DataTablePenaltyRowDeleted(this, new DataTablePenaltyRowChangeEvent(((DataTablePenaltyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTablePenaltyRowDeleting != null)) {
                    this.DataTablePenaltyRowDeleting(this, new DataTablePenaltyRowChangeEvent(((DataTablePenaltyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTablePenaltyRow(DataTablePenaltyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetBandP ds = new DataSetBandP();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTablePenaltyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableBonusRow : System.Data.DataRow {
            
            private DataTableBonusDataTable tableDataTableBonus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableBonusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableBonus = ((DataTableBonusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numberpp {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.numberppColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numberpp\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.numberppColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_bonus {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.date_bonusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'date_bonus\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.date_bonusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bonus_reason {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.bonus_reasonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'bonus_reason\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.bonus_reasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bonus_type {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.bonus_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'bonus_type\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.bonus_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumberppNull() {
                return this.IsNull(this.tableDataTableBonus.numberppColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumberppNull() {
                this[this.tableDataTableBonus.numberppColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_bonusNull() {
                return this.IsNull(this.tableDataTableBonus.date_bonusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_bonusNull() {
                this[this.tableDataTableBonus.date_bonusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbonus_reasonNull() {
                return this.IsNull(this.tableDataTableBonus.bonus_reasonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbonus_reasonNull() {
                this[this.tableDataTableBonus.bonus_reasonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbonus_typeNull() {
                return this.IsNull(this.tableDataTableBonus.bonus_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbonus_typeNull() {
                this[this.tableDataTableBonus.bonus_typeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTablePenaltyRow : System.Data.DataRow {
            
            private DataTablePenaltyDataTable tableDataTablePenalty;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePenaltyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTablePenalty = ((DataTablePenaltyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numberpp {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty.numberppColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'numberpp\' in table \'DataTablePenalty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty.numberppColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_penalty {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty.date_penaltyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'date_penalty\' in table \'DataTablePenalty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty.date_penaltyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty.reasonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'reason\' in table \'DataTablePenalty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty.reasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string penalty_type {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty.penalty_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'penalty_type\' in table \'DataTablePenalty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty.penalty_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string removal {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty.removalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'removal\' in table \'DataTablePenalty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty.removalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumberppNull() {
                return this.IsNull(this.tableDataTablePenalty.numberppColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumberppNull() {
                this[this.tableDataTablePenalty.numberppColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_penaltyNull() {
                return this.IsNull(this.tableDataTablePenalty.date_penaltyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_penaltyNull() {
                this[this.tableDataTablePenalty.date_penaltyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableDataTablePenalty.reasonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableDataTablePenalty.reasonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispenalty_typeNull() {
                return this.IsNull(this.tableDataTablePenalty.penalty_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpenalty_typeNull() {
                this[this.tableDataTablePenalty.penalty_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremovalNull() {
                return this.IsNull(this.tableDataTablePenalty.removalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremovalNull() {
                this[this.tableDataTablePenalty.removalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableBonusRowChangeEvent : System.EventArgs {
            
            private DataTableBonusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRowChangeEvent(DataTableBonusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTablePenaltyRowChangeEvent : System.EventArgs {
            
            private DataTablePenaltyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenaltyRowChangeEvent(DataTablePenaltyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenaltyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591