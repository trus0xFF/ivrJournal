//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ivrJournal {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSetDIVR")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetDIVR : System.Data.DataSet {
        
        private DataTablePsycho_charDataTable tableDataTablePsycho_char;
        
        private DataTableIvr1DataTable tableDataTableIvr1;
        
        private DataTableBonusDataTable tableDataTableBonus;
        
        private DataTablePenalty2DataTable tableDataTablePenalty2;
        
        private DataTableLogoDataTable tableDataTableLogo;
        
        private DataTableResolutionDataTable tableDataTableResolution;
        
        private DataTablePartyDataTable tableDataTableParty;
        
        private DataTableIvr2DataTable tableDataTableIvr2;
        
        private DataTableIvr3DataTable tableDataTableIvr3;
        
        private DataTablePenalty1DataTable tableDataTablePenalty1;
        
        private DataTableRelationsDataTable tableDataTableRelations;
        
        private DataTablePrev_convDataTable tableDataTablePrev_conv;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetDIVR() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetDIVR(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTablePsycho_char"] != null)) {
                    base.Tables.Add(new DataTablePsycho_charDataTable(ds.Tables["DataTablePsycho_char"]));
                }
                if ((ds.Tables["DataTableIvr1"] != null)) {
                    base.Tables.Add(new DataTableIvr1DataTable(ds.Tables["DataTableIvr1"]));
                }
                if ((ds.Tables["DataTableBonus"] != null)) {
                    base.Tables.Add(new DataTableBonusDataTable(ds.Tables["DataTableBonus"]));
                }
                if ((ds.Tables["DataTablePenalty2"] != null)) {
                    base.Tables.Add(new DataTablePenalty2DataTable(ds.Tables["DataTablePenalty2"]));
                }
                if ((ds.Tables["DataTableLogo"] != null)) {
                    base.Tables.Add(new DataTableLogoDataTable(ds.Tables["DataTableLogo"]));
                }
                if ((ds.Tables["DataTableResolution"] != null)) {
                    base.Tables.Add(new DataTableResolutionDataTable(ds.Tables["DataTableResolution"]));
                }
                if ((ds.Tables["DataTableParty"] != null)) {
                    base.Tables.Add(new DataTablePartyDataTable(ds.Tables["DataTableParty"]));
                }
                if ((ds.Tables["DataTableIvr2"] != null)) {
                    base.Tables.Add(new DataTableIvr2DataTable(ds.Tables["DataTableIvr2"]));
                }
                if ((ds.Tables["DataTableIvr3"] != null)) {
                    base.Tables.Add(new DataTableIvr3DataTable(ds.Tables["DataTableIvr3"]));
                }
                if ((ds.Tables["DataTablePenalty1"] != null)) {
                    base.Tables.Add(new DataTablePenalty1DataTable(ds.Tables["DataTablePenalty1"]));
                }
                if ((ds.Tables["DataTableRelations"] != null)) {
                    base.Tables.Add(new DataTableRelationsDataTable(ds.Tables["DataTableRelations"]));
                }
                if ((ds.Tables["DataTablePrev_conv"] != null)) {
                    base.Tables.Add(new DataTablePrev_convDataTable(ds.Tables["DataTablePrev_conv"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTablePsycho_charDataTable DataTablePsycho_char {
            get {
                return this.tableDataTablePsycho_char;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableIvr1DataTable DataTableIvr1 {
            get {
                return this.tableDataTableIvr1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableBonusDataTable DataTableBonus {
            get {
                return this.tableDataTableBonus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTablePenalty2DataTable DataTablePenalty2 {
            get {
                return this.tableDataTablePenalty2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableLogoDataTable DataTableLogo {
            get {
                return this.tableDataTableLogo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableResolutionDataTable DataTableResolution {
            get {
                return this.tableDataTableResolution;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTablePartyDataTable DataTableParty {
            get {
                return this.tableDataTableParty;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableIvr2DataTable DataTableIvr2 {
            get {
                return this.tableDataTableIvr2;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableIvr3DataTable DataTableIvr3 {
            get {
                return this.tableDataTableIvr3;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTablePenalty1DataTable DataTablePenalty1 {
            get {
                return this.tableDataTablePenalty1;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTableRelationsDataTable DataTableRelations {
            get {
                return this.tableDataTableRelations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTablePrev_convDataTable DataTablePrev_conv {
            get {
                return this.tableDataTablePrev_conv;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSetDIVR cln = ((DataSetDIVR)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTablePsycho_char"] != null)) {
                    base.Tables.Add(new DataTablePsycho_charDataTable(ds.Tables["DataTablePsycho_char"]));
                }
                if ((ds.Tables["DataTableIvr1"] != null)) {
                    base.Tables.Add(new DataTableIvr1DataTable(ds.Tables["DataTableIvr1"]));
                }
                if ((ds.Tables["DataTableBonus"] != null)) {
                    base.Tables.Add(new DataTableBonusDataTable(ds.Tables["DataTableBonus"]));
                }
                if ((ds.Tables["DataTablePenalty2"] != null)) {
                    base.Tables.Add(new DataTablePenalty2DataTable(ds.Tables["DataTablePenalty2"]));
                }
                if ((ds.Tables["DataTableLogo"] != null)) {
                    base.Tables.Add(new DataTableLogoDataTable(ds.Tables["DataTableLogo"]));
                }
                if ((ds.Tables["DataTableResolution"] != null)) {
                    base.Tables.Add(new DataTableResolutionDataTable(ds.Tables["DataTableResolution"]));
                }
                if ((ds.Tables["DataTableParty"] != null)) {
                    base.Tables.Add(new DataTablePartyDataTable(ds.Tables["DataTableParty"]));
                }
                if ((ds.Tables["DataTableIvr2"] != null)) {
                    base.Tables.Add(new DataTableIvr2DataTable(ds.Tables["DataTableIvr2"]));
                }
                if ((ds.Tables["DataTableIvr3"] != null)) {
                    base.Tables.Add(new DataTableIvr3DataTable(ds.Tables["DataTableIvr3"]));
                }
                if ((ds.Tables["DataTablePenalty1"] != null)) {
                    base.Tables.Add(new DataTablePenalty1DataTable(ds.Tables["DataTablePenalty1"]));
                }
                if ((ds.Tables["DataTableRelations"] != null)) {
                    base.Tables.Add(new DataTableRelationsDataTable(ds.Tables["DataTableRelations"]));
                }
                if ((ds.Tables["DataTablePrev_conv"] != null)) {
                    base.Tables.Add(new DataTablePrev_convDataTable(ds.Tables["DataTablePrev_conv"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDataTablePsycho_char = ((DataTablePsycho_charDataTable)(base.Tables["DataTablePsycho_char"]));
            if ((initTable == true)) {
                if ((this.tableDataTablePsycho_char != null)) {
                    this.tableDataTablePsycho_char.InitVars();
                }
            }
            this.tableDataTableIvr1 = ((DataTableIvr1DataTable)(base.Tables["DataTableIvr1"]));
            if ((initTable == true)) {
                if ((this.tableDataTableIvr1 != null)) {
                    this.tableDataTableIvr1.InitVars();
                }
            }
            this.tableDataTableBonus = ((DataTableBonusDataTable)(base.Tables["DataTableBonus"]));
            if ((initTable == true)) {
                if ((this.tableDataTableBonus != null)) {
                    this.tableDataTableBonus.InitVars();
                }
            }
            this.tableDataTablePenalty2 = ((DataTablePenalty2DataTable)(base.Tables["DataTablePenalty2"]));
            if ((initTable == true)) {
                if ((this.tableDataTablePenalty2 != null)) {
                    this.tableDataTablePenalty2.InitVars();
                }
            }
            this.tableDataTableLogo = ((DataTableLogoDataTable)(base.Tables["DataTableLogo"]));
            if ((initTable == true)) {
                if ((this.tableDataTableLogo != null)) {
                    this.tableDataTableLogo.InitVars();
                }
            }
            this.tableDataTableResolution = ((DataTableResolutionDataTable)(base.Tables["DataTableResolution"]));
            if ((initTable == true)) {
                if ((this.tableDataTableResolution != null)) {
                    this.tableDataTableResolution.InitVars();
                }
            }
            this.tableDataTableParty = ((DataTablePartyDataTable)(base.Tables["DataTableParty"]));
            if ((initTable == true)) {
                if ((this.tableDataTableParty != null)) {
                    this.tableDataTableParty.InitVars();
                }
            }
            this.tableDataTableIvr2 = ((DataTableIvr2DataTable)(base.Tables["DataTableIvr2"]));
            if ((initTable == true)) {
                if ((this.tableDataTableIvr2 != null)) {
                    this.tableDataTableIvr2.InitVars();
                }
            }
            this.tableDataTableIvr3 = ((DataTableIvr3DataTable)(base.Tables["DataTableIvr3"]));
            if ((initTable == true)) {
                if ((this.tableDataTableIvr3 != null)) {
                    this.tableDataTableIvr3.InitVars();
                }
            }
            this.tableDataTablePenalty1 = ((DataTablePenalty1DataTable)(base.Tables["DataTablePenalty1"]));
            if ((initTable == true)) {
                if ((this.tableDataTablePenalty1 != null)) {
                    this.tableDataTablePenalty1.InitVars();
                }
            }
            this.tableDataTableRelations = ((DataTableRelationsDataTable)(base.Tables["DataTableRelations"]));
            if ((initTable == true)) {
                if ((this.tableDataTableRelations != null)) {
                    this.tableDataTableRelations.InitVars();
                }
            }
            this.tableDataTablePrev_conv = ((DataTablePrev_convDataTable)(base.Tables["DataTablePrev_conv"]));
            if ((initTable == true)) {
                if ((this.tableDataTablePrev_conv != null)) {
                    this.tableDataTablePrev_conv.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetDIVR";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetDIVR.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTablePsycho_char = new DataTablePsycho_charDataTable();
            base.Tables.Add(this.tableDataTablePsycho_char);
            this.tableDataTableIvr1 = new DataTableIvr1DataTable();
            base.Tables.Add(this.tableDataTableIvr1);
            this.tableDataTableBonus = new DataTableBonusDataTable();
            base.Tables.Add(this.tableDataTableBonus);
            this.tableDataTablePenalty2 = new DataTablePenalty2DataTable();
            base.Tables.Add(this.tableDataTablePenalty2);
            this.tableDataTableLogo = new DataTableLogoDataTable();
            base.Tables.Add(this.tableDataTableLogo);
            this.tableDataTableResolution = new DataTableResolutionDataTable();
            base.Tables.Add(this.tableDataTableResolution);
            this.tableDataTableParty = new DataTablePartyDataTable();
            base.Tables.Add(this.tableDataTableParty);
            this.tableDataTableIvr2 = new DataTableIvr2DataTable();
            base.Tables.Add(this.tableDataTableIvr2);
            this.tableDataTableIvr3 = new DataTableIvr3DataTable();
            base.Tables.Add(this.tableDataTableIvr3);
            this.tableDataTablePenalty1 = new DataTablePenalty1DataTable();
            base.Tables.Add(this.tableDataTablePenalty1);
            this.tableDataTableRelations = new DataTableRelationsDataTable();
            base.Tables.Add(this.tableDataTableRelations);
            this.tableDataTablePrev_conv = new DataTablePrev_convDataTable();
            base.Tables.Add(this.tableDataTablePrev_conv);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTablePsycho_char() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableIvr1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableBonus() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTablePenalty2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableLogo() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableResolution() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableParty() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableIvr2() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableIvr3() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTablePenalty1() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTableRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDataTablePrev_conv() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSetDIVR ds = new DataSetDIVR();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void DataTablePsycho_charRowChangeEventHandler(object sender, DataTablePsycho_charRowChangeEvent e);
        
        public delegate void DataTableIvr1RowChangeEventHandler(object sender, DataTableIvr1RowChangeEvent e);
        
        public delegate void DataTableBonusRowChangeEventHandler(object sender, DataTableBonusRowChangeEvent e);
        
        public delegate void DataTablePenalty2RowChangeEventHandler(object sender, DataTablePenalty2RowChangeEvent e);
        
        public delegate void DataTableLogoRowChangeEventHandler(object sender, DataTableLogoRowChangeEvent e);
        
        public delegate void DataTableResolutionRowChangeEventHandler(object sender, DataTableResolutionRowChangeEvent e);
        
        public delegate void DataTablePartyRowChangeEventHandler(object sender, DataTablePartyRowChangeEvent e);
        
        public delegate void DataTableIvr2RowChangeEventHandler(object sender, DataTableIvr2RowChangeEvent e);
        
        public delegate void DataTableIvr3RowChangeEventHandler(object sender, DataTableIvr3RowChangeEvent e);
        
        public delegate void DataTablePenalty1RowChangeEventHandler(object sender, DataTablePenalty1RowChangeEvent e);
        
        public delegate void DataTableRelationsRowChangeEventHandler(object sender, DataTableRelationsRowChangeEvent e);
        
        public delegate void DataTablePrev_convRowChangeEventHandler(object sender, DataTablePrev_convRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTablePsycho_charDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndate_meet;
            
            private System.Data.DataColumn columnorientation;
            
            private System.Data.DataColumn columnpsycho_char;
            
            private System.Data.DataColumn columnbehavior;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePsycho_charDataTable() {
                this.TableName = "DataTablePsycho_char";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePsycho_charDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTablePsycho_charDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date_meetColumn {
                get {
                    return this.columndate_meet;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn orientationColumn {
                get {
                    return this.columnorientation;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn psycho_charColumn {
                get {
                    return this.columnpsycho_char;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn behaviorColumn {
                get {
                    return this.columnbehavior;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePsycho_charRow this[int index] {
                get {
                    return ((DataTablePsycho_charRow)(this.Rows[index]));
                }
            }
            
            public event DataTablePsycho_charRowChangeEventHandler DataTablePsycho_charRowChanging;
            
            public event DataTablePsycho_charRowChangeEventHandler DataTablePsycho_charRowChanged;
            
            public event DataTablePsycho_charRowChangeEventHandler DataTablePsycho_charRowDeleting;
            
            public event DataTablePsycho_charRowChangeEventHandler DataTablePsycho_charRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTablePsycho_charRow(DataTablePsycho_charRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePsycho_charRow AddDataTablePsycho_charRow(string date_meet, string orientation, string psycho_char, string behavior) {
                DataTablePsycho_charRow rowDataTablePsycho_charRow = ((DataTablePsycho_charRow)(this.NewRow()));
                rowDataTablePsycho_charRow.ItemArray = new object[] {
                        date_meet,
                        orientation,
                        psycho_char,
                        behavior};
                this.Rows.Add(rowDataTablePsycho_charRow);
                return rowDataTablePsycho_charRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTablePsycho_charDataTable cln = ((DataTablePsycho_charDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTablePsycho_charDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate_meet = base.Columns["date_meet"];
                this.columnorientation = base.Columns["orientation"];
                this.columnpsycho_char = base.Columns["psycho_char"];
                this.columnbehavior = base.Columns["behavior"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate_meet = new System.Data.DataColumn("date_meet", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_meet);
                this.columnorientation = new System.Data.DataColumn("orientation", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorientation);
                this.columnpsycho_char = new System.Data.DataColumn("psycho_char", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpsycho_char);
                this.columnbehavior = new System.Data.DataColumn("behavior", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbehavior);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePsycho_charRow NewDataTablePsycho_charRow() {
                return ((DataTablePsycho_charRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTablePsycho_charRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTablePsycho_charRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTablePsycho_charRowChanged != null)) {
                    this.DataTablePsycho_charRowChanged(this, new DataTablePsycho_charRowChangeEvent(((DataTablePsycho_charRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTablePsycho_charRowChanging != null)) {
                    this.DataTablePsycho_charRowChanging(this, new DataTablePsycho_charRowChangeEvent(((DataTablePsycho_charRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTablePsycho_charRowDeleted != null)) {
                    this.DataTablePsycho_charRowDeleted(this, new DataTablePsycho_charRowChangeEvent(((DataTablePsycho_charRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTablePsycho_charRowDeleting != null)) {
                    this.DataTablePsycho_charRowDeleting(this, new DataTablePsycho_charRowChangeEvent(((DataTablePsycho_charRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTablePsycho_charRow(DataTablePsycho_charRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTablePsycho_charDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableIvr1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndata_ivr;
            
            private System.Data.DataColumn columncontent;
            
            private System.Data.DataColumn columndescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr1DataTable() {
                this.TableName = "DataTableIvr1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableIvr1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableIvr1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn data_ivrColumn {
                get {
                    return this.columndata_ivr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr1Row this[int index] {
                get {
                    return ((DataTableIvr1Row)(this.Rows[index]));
                }
            }
            
            public event DataTableIvr1RowChangeEventHandler DataTableIvr1RowChanging;
            
            public event DataTableIvr1RowChangeEventHandler DataTableIvr1RowChanged;
            
            public event DataTableIvr1RowChangeEventHandler DataTableIvr1RowDeleting;
            
            public event DataTableIvr1RowChangeEventHandler DataTableIvr1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableIvr1Row(DataTableIvr1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr1Row AddDataTableIvr1Row(System.DateTime data_ivr, string content, string description) {
                DataTableIvr1Row rowDataTableIvr1Row = ((DataTableIvr1Row)(this.NewRow()));
                rowDataTableIvr1Row.ItemArray = new object[] {
                        data_ivr,
                        content,
                        description};
                this.Rows.Add(rowDataTableIvr1Row);
                return rowDataTableIvr1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableIvr1DataTable cln = ((DataTableIvr1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableIvr1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndata_ivr = base.Columns["data_ivr"];
                this.columncontent = base.Columns["content"];
                this.columndescription = base.Columns["description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndata_ivr = new System.Data.DataColumn("data_ivr", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_ivr);
                this.columncontent = new System.Data.DataColumn("content", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr1Row NewDataTableIvr1Row() {
                return ((DataTableIvr1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableIvr1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableIvr1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableIvr1RowChanged != null)) {
                    this.DataTableIvr1RowChanged(this, new DataTableIvr1RowChangeEvent(((DataTableIvr1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableIvr1RowChanging != null)) {
                    this.DataTableIvr1RowChanging(this, new DataTableIvr1RowChangeEvent(((DataTableIvr1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableIvr1RowDeleted != null)) {
                    this.DataTableIvr1RowDeleted(this, new DataTableIvr1RowChangeEvent(((DataTableIvr1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableIvr1RowDeleting != null)) {
                    this.DataTableIvr1RowDeleting(this, new DataTableIvr1RowChangeEvent(((DataTableIvr1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableIvr1Row(DataTableIvr1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableIvr1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableBonusDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndate_bonus;
            
            private System.Data.DataColumn columnbonus_type;
            
            private System.Data.DataColumn columnbonus_reason;
            
            private System.Data.DataColumn columnorder_date;
            
            private System.Data.DataColumn columnorder_number;
            
            private System.Data.DataColumn columnperformers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusDataTable() {
                this.TableName = "DataTableBonus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableBonusDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableBonusDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date_bonusColumn {
                get {
                    return this.columndate_bonus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bonus_typeColumn {
                get {
                    return this.columnbonus_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn bonus_reasonColumn {
                get {
                    return this.columnbonus_reason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn order_dateColumn {
                get {
                    return this.columnorder_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn order_numberColumn {
                get {
                    return this.columnorder_number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn performersColumn {
                get {
                    return this.columnperformers;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow this[int index] {
                get {
                    return ((DataTableBonusRow)(this.Rows[index]));
                }
            }
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowChanging;
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowChanged;
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowDeleting;
            
            public event DataTableBonusRowChangeEventHandler DataTableBonusRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableBonusRow(DataTableBonusRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow AddDataTableBonusRow(System.DateTime date_bonus, string bonus_type, string bonus_reason, System.DateTime order_date, string order_number, string performers) {
                DataTableBonusRow rowDataTableBonusRow = ((DataTableBonusRow)(this.NewRow()));
                rowDataTableBonusRow.ItemArray = new object[] {
                        date_bonus,
                        bonus_type,
                        bonus_reason,
                        order_date,
                        order_number,
                        performers};
                this.Rows.Add(rowDataTableBonusRow);
                return rowDataTableBonusRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableBonusDataTable cln = ((DataTableBonusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableBonusDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate_bonus = base.Columns["date_bonus"];
                this.columnbonus_type = base.Columns["bonus_type"];
                this.columnbonus_reason = base.Columns["bonus_reason"];
                this.columnorder_date = base.Columns["order_date"];
                this.columnorder_number = base.Columns["order_number"];
                this.columnperformers = base.Columns["performers"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate_bonus = new System.Data.DataColumn("date_bonus", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_bonus);
                this.columnbonus_type = new System.Data.DataColumn("bonus_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbonus_type);
                this.columnbonus_reason = new System.Data.DataColumn("bonus_reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbonus_reason);
                this.columnorder_date = new System.Data.DataColumn("order_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_date);
                this.columnorder_number = new System.Data.DataColumn("order_number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_number);
                this.columnperformers = new System.Data.DataColumn("performers", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperformers);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow NewDataTableBonusRow() {
                return ((DataTableBonusRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableBonusRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableBonusRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableBonusRowChanged != null)) {
                    this.DataTableBonusRowChanged(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableBonusRowChanging != null)) {
                    this.DataTableBonusRowChanging(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableBonusRowDeleted != null)) {
                    this.DataTableBonusRowDeleted(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableBonusRowDeleting != null)) {
                    this.DataTableBonusRowDeleting(this, new DataTableBonusRowChangeEvent(((DataTableBonusRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableBonusRow(DataTableBonusRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableBonusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTablePenalty2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndate_penalty;
            
            private System.Data.DataColumn columnpenalty_type;
            
            private System.Data.DataColumn columnreason;
            
            private System.Data.DataColumn columnorder_date;
            
            private System.Data.DataColumn columnorder_number;
            
            private System.Data.DataColumn columnperformers;
            
            private System.Data.DataColumn columnremoval;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty2DataTable() {
                this.TableName = "DataTablePenalty2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePenalty2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTablePenalty2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date_penaltyColumn {
                get {
                    return this.columndate_penalty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn penalty_typeColumn {
                get {
                    return this.columnpenalty_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn order_dateColumn {
                get {
                    return this.columnorder_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn order_numberColumn {
                get {
                    return this.columnorder_number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn performersColumn {
                get {
                    return this.columnperformers;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn removalColumn {
                get {
                    return this.columnremoval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty2Row this[int index] {
                get {
                    return ((DataTablePenalty2Row)(this.Rows[index]));
                }
            }
            
            public event DataTablePenalty2RowChangeEventHandler DataTablePenalty2RowChanging;
            
            public event DataTablePenalty2RowChangeEventHandler DataTablePenalty2RowChanged;
            
            public event DataTablePenalty2RowChangeEventHandler DataTablePenalty2RowDeleting;
            
            public event DataTablePenalty2RowChangeEventHandler DataTablePenalty2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTablePenalty2Row(DataTablePenalty2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty2Row AddDataTablePenalty2Row(System.DateTime date_penalty, string penalty_type, string reason, System.DateTime order_date, string order_number, string performers, string removal) {
                DataTablePenalty2Row rowDataTablePenalty2Row = ((DataTablePenalty2Row)(this.NewRow()));
                rowDataTablePenalty2Row.ItemArray = new object[] {
                        date_penalty,
                        penalty_type,
                        reason,
                        order_date,
                        order_number,
                        performers,
                        removal};
                this.Rows.Add(rowDataTablePenalty2Row);
                return rowDataTablePenalty2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTablePenalty2DataTable cln = ((DataTablePenalty2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTablePenalty2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate_penalty = base.Columns["date_penalty"];
                this.columnpenalty_type = base.Columns["penalty_type"];
                this.columnreason = base.Columns["reason"];
                this.columnorder_date = base.Columns["order_date"];
                this.columnorder_number = base.Columns["order_number"];
                this.columnperformers = base.Columns["performers"];
                this.columnremoval = base.Columns["removal"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate_penalty = new System.Data.DataColumn("date_penalty", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_penalty);
                this.columnpenalty_type = new System.Data.DataColumn("penalty_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpenalty_type);
                this.columnreason = new System.Data.DataColumn("reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
                this.columnorder_date = new System.Data.DataColumn("order_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_date);
                this.columnorder_number = new System.Data.DataColumn("order_number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_number);
                this.columnperformers = new System.Data.DataColumn("performers", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperformers);
                this.columnremoval = new System.Data.DataColumn("removal", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnremoval);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty2Row NewDataTablePenalty2Row() {
                return ((DataTablePenalty2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTablePenalty2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTablePenalty2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTablePenalty2RowChanged != null)) {
                    this.DataTablePenalty2RowChanged(this, new DataTablePenalty2RowChangeEvent(((DataTablePenalty2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTablePenalty2RowChanging != null)) {
                    this.DataTablePenalty2RowChanging(this, new DataTablePenalty2RowChangeEvent(((DataTablePenalty2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTablePenalty2RowDeleted != null)) {
                    this.DataTablePenalty2RowDeleted(this, new DataTablePenalty2RowChangeEvent(((DataTablePenalty2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTablePenalty2RowDeleting != null)) {
                    this.DataTablePenalty2RowDeleting(this, new DataTablePenalty2RowChangeEvent(((DataTablePenalty2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTablePenalty2Row(DataTablePenalty2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTablePenalty2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableLogoDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlogoImage;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableLogoDataTable() {
                this.TableName = "DataTableLogo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableLogoDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableLogoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn logoImageColumn {
                get {
                    return this.columnlogoImage;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableLogoRow this[int index] {
                get {
                    return ((DataTableLogoRow)(this.Rows[index]));
                }
            }
            
            public event DataTableLogoRowChangeEventHandler DataTableLogoRowChanging;
            
            public event DataTableLogoRowChangeEventHandler DataTableLogoRowChanged;
            
            public event DataTableLogoRowChangeEventHandler DataTableLogoRowDeleting;
            
            public event DataTableLogoRowChangeEventHandler DataTableLogoRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableLogoRow(DataTableLogoRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableLogoRow AddDataTableLogoRow(string logoImage) {
                DataTableLogoRow rowDataTableLogoRow = ((DataTableLogoRow)(this.NewRow()));
                rowDataTableLogoRow.ItemArray = new object[] {
                        logoImage};
                this.Rows.Add(rowDataTableLogoRow);
                return rowDataTableLogoRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableLogoDataTable cln = ((DataTableLogoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableLogoDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlogoImage = base.Columns["logoImage"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlogoImage = new System.Data.DataColumn("logoImage", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogoImage);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableLogoRow NewDataTableLogoRow() {
                return ((DataTableLogoRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableLogoRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableLogoRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableLogoRowChanged != null)) {
                    this.DataTableLogoRowChanged(this, new DataTableLogoRowChangeEvent(((DataTableLogoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableLogoRowChanging != null)) {
                    this.DataTableLogoRowChanging(this, new DataTableLogoRowChangeEvent(((DataTableLogoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableLogoRowDeleted != null)) {
                    this.DataTableLogoRowDeleted(this, new DataTableLogoRowChangeEvent(((DataTableLogoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableLogoRowDeleting != null)) {
                    this.DataTableLogoRowDeleting(this, new DataTableLogoRowChangeEvent(((DataTableLogoRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableLogoRow(DataTableLogoRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableLogoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableResolutionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndate_resolution;
            
            private System.Data.DataColumn columnresolution;
            
            private System.Data.DataColumn columndescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableResolutionDataTable() {
                this.TableName = "DataTableResolution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableResolutionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableResolutionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date_resolutionColumn {
                get {
                    return this.columndate_resolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn resolutionColumn {
                get {
                    return this.columnresolution;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableResolutionRow this[int index] {
                get {
                    return ((DataTableResolutionRow)(this.Rows[index]));
                }
            }
            
            public event DataTableResolutionRowChangeEventHandler DataTableResolutionRowChanging;
            
            public event DataTableResolutionRowChangeEventHandler DataTableResolutionRowChanged;
            
            public event DataTableResolutionRowChangeEventHandler DataTableResolutionRowDeleting;
            
            public event DataTableResolutionRowChangeEventHandler DataTableResolutionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableResolutionRow(DataTableResolutionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableResolutionRow AddDataTableResolutionRow(string date_resolution, string resolution, string description) {
                DataTableResolutionRow rowDataTableResolutionRow = ((DataTableResolutionRow)(this.NewRow()));
                rowDataTableResolutionRow.ItemArray = new object[] {
                        date_resolution,
                        resolution,
                        description};
                this.Rows.Add(rowDataTableResolutionRow);
                return rowDataTableResolutionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableResolutionDataTable cln = ((DataTableResolutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableResolutionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate_resolution = base.Columns["date_resolution"];
                this.columnresolution = base.Columns["resolution"];
                this.columndescription = base.Columns["description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate_resolution = new System.Data.DataColumn("date_resolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_resolution);
                this.columnresolution = new System.Data.DataColumn("resolution", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnresolution);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableResolutionRow NewDataTableResolutionRow() {
                return ((DataTableResolutionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableResolutionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableResolutionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableResolutionRowChanged != null)) {
                    this.DataTableResolutionRowChanged(this, new DataTableResolutionRowChangeEvent(((DataTableResolutionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableResolutionRowChanging != null)) {
                    this.DataTableResolutionRowChanging(this, new DataTableResolutionRowChangeEvent(((DataTableResolutionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableResolutionRowDeleted != null)) {
                    this.DataTableResolutionRowDeleted(this, new DataTableResolutionRowChangeEvent(((DataTableResolutionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableResolutionRowDeleting != null)) {
                    this.DataTableResolutionRowDeleting(this, new DataTableResolutionRowChangeEvent(((DataTableResolutionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableResolutionRow(DataTableResolutionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableResolutionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTablePartyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnarr_date;
            
            private System.Data.DataColumn columnord;
            
            private System.Data.DataColumn columnreason;
            
            private System.Data.DataColumn columnparty_number;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePartyDataTable() {
                this.TableName = "DataTableParty";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePartyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTablePartyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn arr_dateColumn {
                get {
                    return this.columnarr_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ordColumn {
                get {
                    return this.columnord;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn party_numberColumn {
                get {
                    return this.columnparty_number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePartyRow this[int index] {
                get {
                    return ((DataTablePartyRow)(this.Rows[index]));
                }
            }
            
            public event DataTablePartyRowChangeEventHandler DataTablePartyRowChanging;
            
            public event DataTablePartyRowChangeEventHandler DataTablePartyRowChanged;
            
            public event DataTablePartyRowChangeEventHandler DataTablePartyRowDeleting;
            
            public event DataTablePartyRowChangeEventHandler DataTablePartyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTablePartyRow(DataTablePartyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePartyRow AddDataTablePartyRow(string arr_date, string ord, string reason, string party_number) {
                DataTablePartyRow rowDataTablePartyRow = ((DataTablePartyRow)(this.NewRow()));
                rowDataTablePartyRow.ItemArray = new object[] {
                        arr_date,
                        ord,
                        reason,
                        party_number};
                this.Rows.Add(rowDataTablePartyRow);
                return rowDataTablePartyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTablePartyDataTable cln = ((DataTablePartyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTablePartyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnarr_date = base.Columns["arr_date"];
                this.columnord = base.Columns["ord"];
                this.columnreason = base.Columns["reason"];
                this.columnparty_number = base.Columns["party_number"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnarr_date = new System.Data.DataColumn("arr_date", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarr_date);
                this.columnord = new System.Data.DataColumn("ord", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnord);
                this.columnreason = new System.Data.DataColumn("reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
                this.columnparty_number = new System.Data.DataColumn("party_number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnparty_number);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePartyRow NewDataTablePartyRow() {
                return ((DataTablePartyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTablePartyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTablePartyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTablePartyRowChanged != null)) {
                    this.DataTablePartyRowChanged(this, new DataTablePartyRowChangeEvent(((DataTablePartyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTablePartyRowChanging != null)) {
                    this.DataTablePartyRowChanging(this, new DataTablePartyRowChangeEvent(((DataTablePartyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTablePartyRowDeleted != null)) {
                    this.DataTablePartyRowDeleted(this, new DataTablePartyRowChangeEvent(((DataTablePartyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTablePartyRowDeleting != null)) {
                    this.DataTablePartyRowDeleting(this, new DataTablePartyRowChangeEvent(((DataTablePartyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTablePartyRow(DataTablePartyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTablePartyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableIvr2DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndata_ivr;
            
            private System.Data.DataColumn columncontent;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columnemployee;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr2DataTable() {
                this.TableName = "DataTableIvr2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableIvr2DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableIvr2DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn data_ivrColumn {
                get {
                    return this.columndata_ivr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn employeeColumn {
                get {
                    return this.columnemployee;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr2Row this[int index] {
                get {
                    return ((DataTableIvr2Row)(this.Rows[index]));
                }
            }
            
            public event DataTableIvr2RowChangeEventHandler DataTableIvr2RowChanging;
            
            public event DataTableIvr2RowChangeEventHandler DataTableIvr2RowChanged;
            
            public event DataTableIvr2RowChangeEventHandler DataTableIvr2RowDeleting;
            
            public event DataTableIvr2RowChangeEventHandler DataTableIvr2RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableIvr2Row(DataTableIvr2Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr2Row AddDataTableIvr2Row(System.DateTime data_ivr, string content, string description, string employee) {
                DataTableIvr2Row rowDataTableIvr2Row = ((DataTableIvr2Row)(this.NewRow()));
                rowDataTableIvr2Row.ItemArray = new object[] {
                        data_ivr,
                        content,
                        description,
                        employee};
                this.Rows.Add(rowDataTableIvr2Row);
                return rowDataTableIvr2Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableIvr2DataTable cln = ((DataTableIvr2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableIvr2DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndata_ivr = base.Columns["data_ivr"];
                this.columncontent = base.Columns["content"];
                this.columndescription = base.Columns["description"];
                this.columnemployee = base.Columns["employee"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndata_ivr = new System.Data.DataColumn("data_ivr", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_ivr);
                this.columncontent = new System.Data.DataColumn("content", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnemployee = new System.Data.DataColumn("employee", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemployee);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr2Row NewDataTableIvr2Row() {
                return ((DataTableIvr2Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableIvr2Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableIvr2Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableIvr2RowChanged != null)) {
                    this.DataTableIvr2RowChanged(this, new DataTableIvr2RowChangeEvent(((DataTableIvr2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableIvr2RowChanging != null)) {
                    this.DataTableIvr2RowChanging(this, new DataTableIvr2RowChangeEvent(((DataTableIvr2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableIvr2RowDeleted != null)) {
                    this.DataTableIvr2RowDeleted(this, new DataTableIvr2RowChangeEvent(((DataTableIvr2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableIvr2RowDeleting != null)) {
                    this.DataTableIvr2RowDeleting(this, new DataTableIvr2RowChangeEvent(((DataTableIvr2Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableIvr2Row(DataTableIvr2Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableIvr2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableIvr3DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndata_ivr;
            
            private System.Data.DataColumn columncontent;
            
            private System.Data.DataColumn columndescription;
            
            private System.Data.DataColumn columnemployee;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr3DataTable() {
                this.TableName = "DataTableIvr3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableIvr3DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableIvr3DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn data_ivrColumn {
                get {
                    return this.columndata_ivr;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn employeeColumn {
                get {
                    return this.columnemployee;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr3Row this[int index] {
                get {
                    return ((DataTableIvr3Row)(this.Rows[index]));
                }
            }
            
            public event DataTableIvr3RowChangeEventHandler DataTableIvr3RowChanging;
            
            public event DataTableIvr3RowChangeEventHandler DataTableIvr3RowChanged;
            
            public event DataTableIvr3RowChangeEventHandler DataTableIvr3RowDeleting;
            
            public event DataTableIvr3RowChangeEventHandler DataTableIvr3RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableIvr3Row(DataTableIvr3Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr3Row AddDataTableIvr3Row(System.DateTime data_ivr, string content, string description, string employee) {
                DataTableIvr3Row rowDataTableIvr3Row = ((DataTableIvr3Row)(this.NewRow()));
                rowDataTableIvr3Row.ItemArray = new object[] {
                        data_ivr,
                        content,
                        description,
                        employee};
                this.Rows.Add(rowDataTableIvr3Row);
                return rowDataTableIvr3Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableIvr3DataTable cln = ((DataTableIvr3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableIvr3DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndata_ivr = base.Columns["data_ivr"];
                this.columncontent = base.Columns["content"];
                this.columndescription = base.Columns["description"];
                this.columnemployee = base.Columns["employee"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndata_ivr = new System.Data.DataColumn("data_ivr", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndata_ivr);
                this.columncontent = new System.Data.DataColumn("content", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columncontent);
                this.columndescription = new System.Data.DataColumn("description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnemployee = new System.Data.DataColumn("employee", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnemployee);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr3Row NewDataTableIvr3Row() {
                return ((DataTableIvr3Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableIvr3Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableIvr3Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableIvr3RowChanged != null)) {
                    this.DataTableIvr3RowChanged(this, new DataTableIvr3RowChangeEvent(((DataTableIvr3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableIvr3RowChanging != null)) {
                    this.DataTableIvr3RowChanging(this, new DataTableIvr3RowChangeEvent(((DataTableIvr3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableIvr3RowDeleted != null)) {
                    this.DataTableIvr3RowDeleted(this, new DataTableIvr3RowChangeEvent(((DataTableIvr3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableIvr3RowDeleting != null)) {
                    this.DataTableIvr3RowDeleting(this, new DataTableIvr3RowChangeEvent(((DataTableIvr3Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableIvr3Row(DataTableIvr3Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableIvr3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTablePenalty1DataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columndate_penalty;
            
            private System.Data.DataColumn columnpenalty_type;
            
            private System.Data.DataColumn columnreason;
            
            private System.Data.DataColumn columnorder_date;
            
            private System.Data.DataColumn columnorder_number;
            
            private System.Data.DataColumn columnperformers;
            
            private System.Data.DataColumn columnremoval;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty1DataTable() {
                this.TableName = "DataTablePenalty1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePenalty1DataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTablePenalty1DataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn date_penaltyColumn {
                get {
                    return this.columndate_penalty;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn penalty_typeColumn {
                get {
                    return this.columnpenalty_type;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn reasonColumn {
                get {
                    return this.columnreason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn order_dateColumn {
                get {
                    return this.columnorder_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn order_numberColumn {
                get {
                    return this.columnorder_number;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn performersColumn {
                get {
                    return this.columnperformers;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn removalColumn {
                get {
                    return this.columnremoval;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty1Row this[int index] {
                get {
                    return ((DataTablePenalty1Row)(this.Rows[index]));
                }
            }
            
            public event DataTablePenalty1RowChangeEventHandler DataTablePenalty1RowChanging;
            
            public event DataTablePenalty1RowChangeEventHandler DataTablePenalty1RowChanged;
            
            public event DataTablePenalty1RowChangeEventHandler DataTablePenalty1RowDeleting;
            
            public event DataTablePenalty1RowChangeEventHandler DataTablePenalty1RowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTablePenalty1Row(DataTablePenalty1Row row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty1Row AddDataTablePenalty1Row(System.DateTime date_penalty, string penalty_type, string reason, System.DateTime order_date, string order_number, string performers, string removal) {
                DataTablePenalty1Row rowDataTablePenalty1Row = ((DataTablePenalty1Row)(this.NewRow()));
                rowDataTablePenalty1Row.ItemArray = new object[] {
                        date_penalty,
                        penalty_type,
                        reason,
                        order_date,
                        order_number,
                        performers,
                        removal};
                this.Rows.Add(rowDataTablePenalty1Row);
                return rowDataTablePenalty1Row;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTablePenalty1DataTable cln = ((DataTablePenalty1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTablePenalty1DataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate_penalty = base.Columns["date_penalty"];
                this.columnpenalty_type = base.Columns["penalty_type"];
                this.columnreason = base.Columns["reason"];
                this.columnorder_date = base.Columns["order_date"];
                this.columnorder_number = base.Columns["order_number"];
                this.columnperformers = base.Columns["performers"];
                this.columnremoval = base.Columns["removal"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate_penalty = new System.Data.DataColumn("date_penalty", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_penalty);
                this.columnpenalty_type = new System.Data.DataColumn("penalty_type", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpenalty_type);
                this.columnreason = new System.Data.DataColumn("reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnreason);
                this.columnorder_date = new System.Data.DataColumn("order_date", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_date);
                this.columnorder_number = new System.Data.DataColumn("order_number", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnorder_number);
                this.columnperformers = new System.Data.DataColumn("performers", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperformers);
                this.columnremoval = new System.Data.DataColumn("removal", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnremoval);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty1Row NewDataTablePenalty1Row() {
                return ((DataTablePenalty1Row)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTablePenalty1Row(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTablePenalty1Row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTablePenalty1RowChanged != null)) {
                    this.DataTablePenalty1RowChanged(this, new DataTablePenalty1RowChangeEvent(((DataTablePenalty1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTablePenalty1RowChanging != null)) {
                    this.DataTablePenalty1RowChanging(this, new DataTablePenalty1RowChangeEvent(((DataTablePenalty1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTablePenalty1RowDeleted != null)) {
                    this.DataTablePenalty1RowDeleted(this, new DataTablePenalty1RowChangeEvent(((DataTablePenalty1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTablePenalty1RowDeleting != null)) {
                    this.DataTablePenalty1RowDeleting(this, new DataTablePenalty1RowChangeEvent(((DataTablePenalty1Row)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTablePenalty1Row(DataTablePenalty1Row row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTablePenalty1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTableRelationsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlast_name;
            
            private System.Data.DataColumn columnfirst_name;
            
            private System.Data.DataColumn columnpatronymic;
            
            private System.Data.DataColumn columndegree;
            
            private System.Data.DataColumn columnaddress;
            
            private System.Data.DataColumn columnbirthdate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableRelationsDataTable() {
                this.TableName = "DataTableRelations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableRelationsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTableRelationsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn last_nameColumn {
                get {
                    return this.columnlast_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn first_nameColumn {
                get {
                    return this.columnfirst_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn patronymicColumn {
                get {
                    return this.columnpatronymic;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn degreeColumn {
                get {
                    return this.columndegree;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn addressColumn {
                get {
                    return this.columnaddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn birthdateColumn {
                get {
                    return this.columnbirthdate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableRelationsRow this[int index] {
                get {
                    return ((DataTableRelationsRow)(this.Rows[index]));
                }
            }
            
            public event DataTableRelationsRowChangeEventHandler DataTableRelationsRowChanging;
            
            public event DataTableRelationsRowChangeEventHandler DataTableRelationsRowChanged;
            
            public event DataTableRelationsRowChangeEventHandler DataTableRelationsRowDeleting;
            
            public event DataTableRelationsRowChangeEventHandler DataTableRelationsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTableRelationsRow(DataTableRelationsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableRelationsRow AddDataTableRelationsRow(string last_name, string first_name, string patronymic, string degree, string address, string birthdate) {
                DataTableRelationsRow rowDataTableRelationsRow = ((DataTableRelationsRow)(this.NewRow()));
                rowDataTableRelationsRow.ItemArray = new object[] {
                        last_name,
                        first_name,
                        patronymic,
                        degree,
                        address,
                        birthdate};
                this.Rows.Add(rowDataTableRelationsRow);
                return rowDataTableRelationsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTableRelationsDataTable cln = ((DataTableRelationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTableRelationsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlast_name = base.Columns["last_name"];
                this.columnfirst_name = base.Columns["first_name"];
                this.columnpatronymic = base.Columns["patronymic"];
                this.columndegree = base.Columns["degree"];
                this.columnaddress = base.Columns["address"];
                this.columnbirthdate = base.Columns["birthdate"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlast_name = new System.Data.DataColumn("last_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_name);
                this.columnfirst_name = new System.Data.DataColumn("first_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_name);
                this.columnpatronymic = new System.Data.DataColumn("patronymic", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnpatronymic);
                this.columndegree = new System.Data.DataColumn("degree", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columndegree);
                this.columnaddress = new System.Data.DataColumn("address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnaddress);
                this.columnbirthdate = new System.Data.DataColumn("birthdate", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnbirthdate);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableRelationsRow NewDataTableRelationsRow() {
                return ((DataTableRelationsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTableRelationsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTableRelationsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTableRelationsRowChanged != null)) {
                    this.DataTableRelationsRowChanged(this, new DataTableRelationsRowChangeEvent(((DataTableRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTableRelationsRowChanging != null)) {
                    this.DataTableRelationsRowChanging(this, new DataTableRelationsRowChangeEvent(((DataTableRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTableRelationsRowDeleted != null)) {
                    this.DataTableRelationsRowDeleted(this, new DataTableRelationsRowChangeEvent(((DataTableRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTableRelationsRowDeleting != null)) {
                    this.DataTableRelationsRowDeleting(this, new DataTableRelationsRowChangeEvent(((DataTableRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTableRelationsRow(DataTableRelationsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTableRelationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTablePrev_convDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnstart_date;
            
            private System.Data.DataColumn columnperiod;
            
            private System.Data.DataColumn columntext_prev;
            
            private System.Data.DataColumn columnperformer;
            
            private System.Data.DataColumn columnarticle;
            
            private System.Data.DataColumn columnrelease_date;
            
            private System.Data.DataColumn columnrelease_reason;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePrev_convDataTable() {
                this.TableName = "DataTablePrev_conv";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePrev_convDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DataTablePrev_convDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn start_dateColumn {
                get {
                    return this.columnstart_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn periodColumn {
                get {
                    return this.columnperiod;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn text_prevColumn {
                get {
                    return this.columntext_prev;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn performerColumn {
                get {
                    return this.columnperformer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn articleColumn {
                get {
                    return this.columnarticle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn release_dateColumn {
                get {
                    return this.columnrelease_date;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn release_reasonColumn {
                get {
                    return this.columnrelease_reason;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePrev_convRow this[int index] {
                get {
                    return ((DataTablePrev_convRow)(this.Rows[index]));
                }
            }
            
            public event DataTablePrev_convRowChangeEventHandler DataTablePrev_convRowChanging;
            
            public event DataTablePrev_convRowChangeEventHandler DataTablePrev_convRowChanged;
            
            public event DataTablePrev_convRowChangeEventHandler DataTablePrev_convRowDeleting;
            
            public event DataTablePrev_convRowChangeEventHandler DataTablePrev_convRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDataTablePrev_convRow(DataTablePrev_convRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePrev_convRow AddDataTablePrev_convRow(string start_date, string period, string text_prev, string performer, string article, string release_date, string release_reason) {
                DataTablePrev_convRow rowDataTablePrev_convRow = ((DataTablePrev_convRow)(this.NewRow()));
                rowDataTablePrev_convRow.ItemArray = new object[] {
                        start_date,
                        period,
                        text_prev,
                        performer,
                        article,
                        release_date,
                        release_reason};
                this.Rows.Add(rowDataTablePrev_convRow);
                return rowDataTablePrev_convRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DataTablePrev_convDataTable cln = ((DataTablePrev_convDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DataTablePrev_convDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnstart_date = base.Columns["start_date"];
                this.columnperiod = base.Columns["period"];
                this.columntext_prev = base.Columns["text_prev"];
                this.columnperformer = base.Columns["performer"];
                this.columnarticle = base.Columns["article"];
                this.columnrelease_date = base.Columns["release_date"];
                this.columnrelease_reason = base.Columns["release_reason"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnstart_date = new System.Data.DataColumn("start_date", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnstart_date);
                this.columnperiod = new System.Data.DataColumn("period", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperiod);
                this.columntext_prev = new System.Data.DataColumn("text_prev", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntext_prev);
                this.columnperformer = new System.Data.DataColumn("performer", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnperformer);
                this.columnarticle = new System.Data.DataColumn("article", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnarticle);
                this.columnrelease_date = new System.Data.DataColumn("release_date", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrelease_date);
                this.columnrelease_reason = new System.Data.DataColumn("release_reason", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnrelease_reason);
                this.columnstart_date.Caption = "date_meet";
                this.columnperiod.Caption = "orientation";
                this.columntext_prev.Caption = "psycho_char";
                this.columnperformer.Caption = "behavior";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePrev_convRow NewDataTablePrev_convRow() {
                return ((DataTablePrev_convRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DataTablePrev_convRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DataTablePrev_convRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTablePrev_convRowChanged != null)) {
                    this.DataTablePrev_convRowChanged(this, new DataTablePrev_convRowChangeEvent(((DataTablePrev_convRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTablePrev_convRowChanging != null)) {
                    this.DataTablePrev_convRowChanging(this, new DataTablePrev_convRowChangeEvent(((DataTablePrev_convRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTablePrev_convRowDeleted != null)) {
                    this.DataTablePrev_convRowDeleted(this, new DataTablePrev_convRowChangeEvent(((DataTablePrev_convRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTablePrev_convRowDeleting != null)) {
                    this.DataTablePrev_convRowDeleting(this, new DataTablePrev_convRowChangeEvent(((DataTablePrev_convRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDataTablePrev_convRow(DataTablePrev_convRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSetDIVR ds = new DataSetDIVR();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTablePrev_convDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTablePsycho_charRow : System.Data.DataRow {
            
            private DataTablePsycho_charDataTable tableDataTablePsycho_char;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePsycho_charRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTablePsycho_char = ((DataTablePsycho_charDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_meet {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePsycho_char.date_meetColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'date_meet\' in table \'DataTablePsycho_char\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePsycho_char.date_meetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string orientation {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePsycho_char.orientationColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'orientation\' in table \'DataTablePsycho_char\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePsycho_char.orientationColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string psycho_char {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePsycho_char.psycho_charColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'psycho_char\' in table \'DataTablePsycho_char\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePsycho_char.psycho_charColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string behavior {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePsycho_char.behaviorColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'behavior\' in table \'DataTablePsycho_char\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePsycho_char.behaviorColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_meetNull() {
                return this.IsNull(this.tableDataTablePsycho_char.date_meetColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_meetNull() {
                this[this.tableDataTablePsycho_char.date_meetColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsorientationNull() {
                return this.IsNull(this.tableDataTablePsycho_char.orientationColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetorientationNull() {
                this[this.tableDataTablePsycho_char.orientationColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispsycho_charNull() {
                return this.IsNull(this.tableDataTablePsycho_char.psycho_charColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpsycho_charNull() {
                this[this.tableDataTablePsycho_char.psycho_charColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbehaviorNull() {
                return this.IsNull(this.tableDataTablePsycho_char.behaviorColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbehaviorNull() {
                this[this.tableDataTablePsycho_char.behaviorColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableIvr1Row : System.Data.DataRow {
            
            private DataTableIvr1DataTable tableDataTableIvr1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableIvr1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableIvr1 = ((DataTableIvr1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime data_ivr {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTableIvr1.data_ivrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'data_ivr\' in table \'DataTableIvr1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr1.data_ivrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr1.contentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'content\' in table \'DataTableIvr1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr1.contentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr1.descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'description\' in table \'DataTableIvr1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr1.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdata_ivrNull() {
                return this.IsNull(this.tableDataTableIvr1.data_ivrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdata_ivrNull() {
                this[this.tableDataTableIvr1.data_ivrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontentNull() {
                return this.IsNull(this.tableDataTableIvr1.contentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontentNull() {
                this[this.tableDataTableIvr1.contentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableDataTableIvr1.descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableDataTableIvr1.descriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableBonusRow : System.Data.DataRow {
            
            private DataTableBonusDataTable tableDataTableBonus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableBonusRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableBonus = ((DataTableBonusDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date_bonus {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTableBonus.date_bonusColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'date_bonus\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.date_bonusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bonus_type {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.bonus_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'bonus_type\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.bonus_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bonus_reason {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.bonus_reasonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'bonus_reason\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.bonus_reasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime order_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTableBonus.order_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'order_date\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.order_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string order_number {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.order_numberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'order_number\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.order_numberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string performers {
                get {
                    try {
                        return ((string)(this[this.tableDataTableBonus.performersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'performers\' in table \'DataTableBonus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableBonus.performersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_bonusNull() {
                return this.IsNull(this.tableDataTableBonus.date_bonusColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_bonusNull() {
                this[this.tableDataTableBonus.date_bonusColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbonus_typeNull() {
                return this.IsNull(this.tableDataTableBonus.bonus_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbonus_typeNull() {
                this[this.tableDataTableBonus.bonus_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbonus_reasonNull() {
                return this.IsNull(this.tableDataTableBonus.bonus_reasonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbonus_reasonNull() {
                this[this.tableDataTableBonus.bonus_reasonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isorder_dateNull() {
                return this.IsNull(this.tableDataTableBonus.order_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setorder_dateNull() {
                this[this.tableDataTableBonus.order_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isorder_numberNull() {
                return this.IsNull(this.tableDataTableBonus.order_numberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setorder_numberNull() {
                this[this.tableDataTableBonus.order_numberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsperformersNull() {
                return this.IsNull(this.tableDataTableBonus.performersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetperformersNull() {
                this[this.tableDataTableBonus.performersColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTablePenalty2Row : System.Data.DataRow {
            
            private DataTablePenalty2DataTable tableDataTablePenalty2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePenalty2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTablePenalty2 = ((DataTablePenalty2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date_penalty {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTablePenalty2.date_penaltyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'date_penalty\' in table \'DataTablePenalty2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty2.date_penaltyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string penalty_type {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty2.penalty_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'penalty_type\' in table \'DataTablePenalty2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty2.penalty_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty2.reasonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'reason\' in table \'DataTablePenalty2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty2.reasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime order_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTablePenalty2.order_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'order_date\' in table \'DataTablePenalty2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty2.order_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string order_number {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty2.order_numberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'order_number\' in table \'DataTablePenalty2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty2.order_numberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string performers {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty2.performersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'performers\' in table \'DataTablePenalty2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty2.performersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string removal {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty2.removalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'removal\' in table \'DataTablePenalty2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty2.removalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_penaltyNull() {
                return this.IsNull(this.tableDataTablePenalty2.date_penaltyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_penaltyNull() {
                this[this.tableDataTablePenalty2.date_penaltyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispenalty_typeNull() {
                return this.IsNull(this.tableDataTablePenalty2.penalty_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpenalty_typeNull() {
                this[this.tableDataTablePenalty2.penalty_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableDataTablePenalty2.reasonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableDataTablePenalty2.reasonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isorder_dateNull() {
                return this.IsNull(this.tableDataTablePenalty2.order_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setorder_dateNull() {
                this[this.tableDataTablePenalty2.order_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isorder_numberNull() {
                return this.IsNull(this.tableDataTablePenalty2.order_numberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setorder_numberNull() {
                this[this.tableDataTablePenalty2.order_numberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsperformersNull() {
                return this.IsNull(this.tableDataTablePenalty2.performersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetperformersNull() {
                this[this.tableDataTablePenalty2.performersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremovalNull() {
                return this.IsNull(this.tableDataTablePenalty2.removalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremovalNull() {
                this[this.tableDataTablePenalty2.removalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableLogoRow : System.Data.DataRow {
            
            private DataTableLogoDataTable tableDataTableLogo;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableLogoRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableLogo = ((DataTableLogoDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string logoImage {
                get {
                    try {
                        return ((string)(this[this.tableDataTableLogo.logoImageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'logoImage\' in table \'DataTableLogo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableLogo.logoImageColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslogoImageNull() {
                return this.IsNull(this.tableDataTableLogo.logoImageColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlogoImageNull() {
                this[this.tableDataTableLogo.logoImageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableResolutionRow : System.Data.DataRow {
            
            private DataTableResolutionDataTable tableDataTableResolution;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableResolutionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableResolution = ((DataTableResolutionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_resolution {
                get {
                    try {
                        return ((string)(this[this.tableDataTableResolution.date_resolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'date_resolution\' in table \'DataTableResolution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableResolution.date_resolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string resolution {
                get {
                    try {
                        return ((string)(this[this.tableDataTableResolution.resolutionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'resolution\' in table \'DataTableResolution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableResolution.resolutionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableDataTableResolution.descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'description\' in table \'DataTableResolution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableResolution.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_resolutionNull() {
                return this.IsNull(this.tableDataTableResolution.date_resolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_resolutionNull() {
                this[this.tableDataTableResolution.date_resolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresolutionNull() {
                return this.IsNull(this.tableDataTableResolution.resolutionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresolutionNull() {
                this[this.tableDataTableResolution.resolutionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableDataTableResolution.descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableDataTableResolution.descriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTablePartyRow : System.Data.DataRow {
            
            private DataTablePartyDataTable tableDataTableParty;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePartyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableParty = ((DataTablePartyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string arr_date {
                get {
                    try {
                        return ((string)(this[this.tableDataTableParty.arr_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'arr_date\' in table \'DataTableParty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableParty.arr_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ord {
                get {
                    try {
                        return ((string)(this[this.tableDataTableParty.ordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ord\' in table \'DataTableParty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableParty.ordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableDataTableParty.reasonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'reason\' in table \'DataTableParty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableParty.reasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string party_number {
                get {
                    try {
                        return ((string)(this[this.tableDataTableParty.party_numberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'party_number\' in table \'DataTableParty\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableParty.party_numberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isarr_dateNull() {
                return this.IsNull(this.tableDataTableParty.arr_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setarr_dateNull() {
                this[this.tableDataTableParty.arr_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsordNull() {
                return this.IsNull(this.tableDataTableParty.ordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetordNull() {
                this[this.tableDataTableParty.ordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableDataTableParty.reasonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableDataTableParty.reasonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isparty_numberNull() {
                return this.IsNull(this.tableDataTableParty.party_numberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setparty_numberNull() {
                this[this.tableDataTableParty.party_numberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableIvr2Row : System.Data.DataRow {
            
            private DataTableIvr2DataTable tableDataTableIvr2;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableIvr2Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableIvr2 = ((DataTableIvr2DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime data_ivr {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTableIvr2.data_ivrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'data_ivr\' in table \'DataTableIvr2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr2.data_ivrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr2.contentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'content\' in table \'DataTableIvr2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr2.contentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr2.descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'description\' in table \'DataTableIvr2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr2.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string employee {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr2.employeeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'employee\' in table \'DataTableIvr2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr2.employeeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdata_ivrNull() {
                return this.IsNull(this.tableDataTableIvr2.data_ivrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdata_ivrNull() {
                this[this.tableDataTableIvr2.data_ivrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontentNull() {
                return this.IsNull(this.tableDataTableIvr2.contentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontentNull() {
                this[this.tableDataTableIvr2.contentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableDataTableIvr2.descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableDataTableIvr2.descriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemployeeNull() {
                return this.IsNull(this.tableDataTableIvr2.employeeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemployeeNull() {
                this[this.tableDataTableIvr2.employeeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableIvr3Row : System.Data.DataRow {
            
            private DataTableIvr3DataTable tableDataTableIvr3;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableIvr3Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableIvr3 = ((DataTableIvr3DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime data_ivr {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTableIvr3.data_ivrColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'data_ivr\' in table \'DataTableIvr3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr3.data_ivrColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr3.contentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'content\' in table \'DataTableIvr3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr3.contentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr3.descriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'description\' in table \'DataTableIvr3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr3.descriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string employee {
                get {
                    try {
                        return ((string)(this[this.tableDataTableIvr3.employeeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'employee\' in table \'DataTableIvr3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableIvr3.employeeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdata_ivrNull() {
                return this.IsNull(this.tableDataTableIvr3.data_ivrColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdata_ivrNull() {
                this[this.tableDataTableIvr3.data_ivrColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscontentNull() {
                return this.IsNull(this.tableDataTableIvr3.contentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcontentNull() {
                this[this.tableDataTableIvr3.contentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableDataTableIvr3.descriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableDataTableIvr3.descriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemployeeNull() {
                return this.IsNull(this.tableDataTableIvr3.employeeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemployeeNull() {
                this[this.tableDataTableIvr3.employeeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTablePenalty1Row : System.Data.DataRow {
            
            private DataTablePenalty1DataTable tableDataTablePenalty1;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePenalty1Row(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTablePenalty1 = ((DataTablePenalty1DataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date_penalty {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTablePenalty1.date_penaltyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'date_penalty\' in table \'DataTablePenalty1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty1.date_penaltyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string penalty_type {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty1.penalty_typeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'penalty_type\' in table \'DataTablePenalty1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty1.penalty_typeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reason {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty1.reasonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'reason\' in table \'DataTablePenalty1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty1.reasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime order_date {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDataTablePenalty1.order_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'order_date\' in table \'DataTablePenalty1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty1.order_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string order_number {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty1.order_numberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'order_number\' in table \'DataTablePenalty1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty1.order_numberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string performers {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty1.performersColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'performers\' in table \'DataTablePenalty1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty1.performersColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string removal {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePenalty1.removalColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'removal\' in table \'DataTablePenalty1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePenalty1.removalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_penaltyNull() {
                return this.IsNull(this.tableDataTablePenalty1.date_penaltyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_penaltyNull() {
                this[this.tableDataTablePenalty1.date_penaltyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispenalty_typeNull() {
                return this.IsNull(this.tableDataTablePenalty1.penalty_typeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpenalty_typeNull() {
                this[this.tableDataTablePenalty1.penalty_typeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsreasonNull() {
                return this.IsNull(this.tableDataTablePenalty1.reasonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetreasonNull() {
                this[this.tableDataTablePenalty1.reasonColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isorder_dateNull() {
                return this.IsNull(this.tableDataTablePenalty1.order_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setorder_dateNull() {
                this[this.tableDataTablePenalty1.order_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isorder_numberNull() {
                return this.IsNull(this.tableDataTablePenalty1.order_numberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setorder_numberNull() {
                this[this.tableDataTablePenalty1.order_numberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsperformersNull() {
                return this.IsNull(this.tableDataTablePenalty1.performersColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetperformersNull() {
                this[this.tableDataTablePenalty1.performersColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsremovalNull() {
                return this.IsNull(this.tableDataTablePenalty1.removalColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetremovalNull() {
                this[this.tableDataTablePenalty1.removalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTableRelationsRow : System.Data.DataRow {
            
            private DataTableRelationsDataTable tableDataTableRelations;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTableRelationsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTableRelations = ((DataTableRelationsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string last_name {
                get {
                    try {
                        return ((string)(this[this.tableDataTableRelations.last_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'last_name\' in table \'DataTableRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableRelations.last_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string first_name {
                get {
                    try {
                        return ((string)(this[this.tableDataTableRelations.first_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'first_name\' in table \'DataTableRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableRelations.first_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string patronymic {
                get {
                    try {
                        return ((string)(this[this.tableDataTableRelations.patronymicColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'patronymic\' in table \'DataTableRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableRelations.patronymicColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string degree {
                get {
                    try {
                        return ((string)(this[this.tableDataTableRelations.degreeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'degree\' in table \'DataTableRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableRelations.degreeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string address {
                get {
                    try {
                        return ((string)(this[this.tableDataTableRelations.addressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'address\' in table \'DataTableRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableRelations.addressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string birthdate {
                get {
                    try {
                        return ((string)(this[this.tableDataTableRelations.birthdateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'birthdate\' in table \'DataTableRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTableRelations.birthdateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_nameNull() {
                return this.IsNull(this.tableDataTableRelations.last_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_nameNull() {
                this[this.tableDataTableRelations.last_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_nameNull() {
                return this.IsNull(this.tableDataTableRelations.first_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_nameNull() {
                this[this.tableDataTableRelations.first_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspatronymicNull() {
                return this.IsNull(this.tableDataTableRelations.patronymicColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpatronymicNull() {
                this[this.tableDataTableRelations.patronymicColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdegreeNull() {
                return this.IsNull(this.tableDataTableRelations.degreeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdegreeNull() {
                this[this.tableDataTableRelations.degreeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaddressNull() {
                return this.IsNull(this.tableDataTableRelations.addressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaddressNull() {
                this[this.tableDataTableRelations.addressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbirthdateNull() {
                return this.IsNull(this.tableDataTableRelations.birthdateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbirthdateNull() {
                this[this.tableDataTableRelations.birthdateColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DataTablePrev_convRow : System.Data.DataRow {
            
            private DataTablePrev_convDataTable tableDataTablePrev_conv;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DataTablePrev_convRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTablePrev_conv = ((DataTablePrev_convDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string start_date {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePrev_conv.start_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'start_date\' in table \'DataTablePrev_conv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePrev_conv.start_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string period {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePrev_conv.periodColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'period\' in table \'DataTablePrev_conv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePrev_conv.periodColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text_prev {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePrev_conv.text_prevColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'text_prev\' in table \'DataTablePrev_conv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePrev_conv.text_prevColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string performer {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePrev_conv.performerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'performer\' in table \'DataTablePrev_conv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePrev_conv.performerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string article {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePrev_conv.articleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'article\' in table \'DataTablePrev_conv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePrev_conv.articleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string release_date {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePrev_conv.release_dateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'release_date\' in table \'DataTablePrev_conv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePrev_conv.release_dateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string release_reason {
                get {
                    try {
                        return ((string)(this[this.tableDataTablePrev_conv.release_reasonColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'release_reason\' in table \'DataTablePrev_conv\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTablePrev_conv.release_reasonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstart_dateNull() {
                return this.IsNull(this.tableDataTablePrev_conv.start_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstart_dateNull() {
                this[this.tableDataTablePrev_conv.start_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsperiodNull() {
                return this.IsNull(this.tableDataTablePrev_conv.periodColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetperiodNull() {
                this[this.tableDataTablePrev_conv.periodColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istext_prevNull() {
                return this.IsNull(this.tableDataTablePrev_conv.text_prevColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settext_prevNull() {
                this[this.tableDataTablePrev_conv.text_prevColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsperformerNull() {
                return this.IsNull(this.tableDataTablePrev_conv.performerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetperformerNull() {
                this[this.tableDataTablePrev_conv.performerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsarticleNull() {
                return this.IsNull(this.tableDataTablePrev_conv.articleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetarticleNull() {
                this[this.tableDataTablePrev_conv.articleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrelease_dateNull() {
                return this.IsNull(this.tableDataTablePrev_conv.release_dateColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrelease_dateNull() {
                this[this.tableDataTablePrev_conv.release_dateColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrelease_reasonNull() {
                return this.IsNull(this.tableDataTablePrev_conv.release_reasonColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrelease_reasonNull() {
                this[this.tableDataTablePrev_conv.release_reasonColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTablePsycho_charRowChangeEvent : System.EventArgs {
            
            private DataTablePsycho_charRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePsycho_charRowChangeEvent(DataTablePsycho_charRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePsycho_charRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableIvr1RowChangeEvent : System.EventArgs {
            
            private DataTableIvr1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr1RowChangeEvent(DataTableIvr1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableBonusRowChangeEvent : System.EventArgs {
            
            private DataTableBonusRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRowChangeEvent(DataTableBonusRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableBonusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTablePenalty2RowChangeEvent : System.EventArgs {
            
            private DataTablePenalty2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty2RowChangeEvent(DataTablePenalty2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableLogoRowChangeEvent : System.EventArgs {
            
            private DataTableLogoRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableLogoRowChangeEvent(DataTableLogoRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableLogoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableResolutionRowChangeEvent : System.EventArgs {
            
            private DataTableResolutionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableResolutionRowChangeEvent(DataTableResolutionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableResolutionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTablePartyRowChangeEvent : System.EventArgs {
            
            private DataTablePartyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePartyRowChangeEvent(DataTablePartyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePartyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableIvr2RowChangeEvent : System.EventArgs {
            
            private DataTableIvr2Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr2RowChangeEvent(DataTableIvr2Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableIvr3RowChangeEvent : System.EventArgs {
            
            private DataTableIvr3Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr3RowChangeEvent(DataTableIvr3Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableIvr3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTablePenalty1RowChangeEvent : System.EventArgs {
            
            private DataTablePenalty1Row eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty1RowChangeEvent(DataTablePenalty1Row row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePenalty1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTableRelationsRowChangeEvent : System.EventArgs {
            
            private DataTableRelationsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableRelationsRowChangeEvent(DataTableRelationsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTableRelationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DataTablePrev_convRowChangeEvent : System.EventArgs {
            
            private DataTablePrev_convRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePrev_convRowChangeEvent(DataTablePrev_convRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DataTablePrev_convRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591